<!-- Login Page HTML Template -->
<div class="login-container">
  <h2>Login</h2>
  <form (submit)="onSubmit()">
    <div class="form-group">
      <label for="username">Username</label>
      <input type="text" id="username" name="username" [(ngModel)]="username" required>
    </div>
    <div class="form-group">
      <label for="password">Password</label>
      <input type="password" id="password" name="password" [(ngModel)]="password" required>
    </div>
    <button type="submit">Login</button>
  </form>
</div>

Angular

// Login Page Component
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';

  constructor(private router: Router) {}

  // Function to handle form submission
  onSubmit(): void {
    // Implement your login logic here
    // For example, check credentials and navigate to the dashboard if successful
    if (this.username === 'admin' && this.password === 'password') {
      // Redirect to the dashboard on successful login
      this.router.navigate(['/dashboard']);
    } else {
      // Show an error message for invalid credentials (you can implement this in your HTML template)
    }
  }
}

css 
/* CSS Styles for Login Page */
.login-container {
  max-width: 300px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: block;
  font-weight: bold;
}

input[type="text"],
input[type="password"] {
  width: 100%;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  display: block;
  width: 100%;
  padding: 8px 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

PAGE 2

<!-- Library Management Page HTML Template -->
<div class="library-container">
  <h2>Library Management</h2>
  <table>
    <thead>
      <tr>
        <th>Book Name</th>
        <th>Author</th>
        <th>ISBN No</th>
        <th>Price</th>
      </tr>
    </thead>
    <tbody>
      <!-- Loop through books and display in tabular format -->
      <tr *ngFor="let book of books">
        <td>{{ book.name }}</td>
        <td>{{ book.author }}</td>
        <td>{{ book.isbn }}</td>
        <td>{{ book.price }}</td>
      </tr>
    </tbody>
  </table>
</div>

Angular 
// Library Management Page Component
import { Component, OnInit } from '@angular/core';
import { Book } from './book'; // Assuming you have a Book interface or class to represent book data

@Component({
  selector: 'app-library-management',
  templateUrl: './library-management.component.html',
  styleUrls: ['./library-management.component.css']
})
export class LibraryManagementComponent implements OnInit {
  books: Book[] = []; // Array to hold the list of books (populate it with actual book data)

  constructor() {}

  ngOnInit(): void {
    // Populate books array with actual book data (you can fetch data from a service or API)
    this.books = [
      { name: 'Book 1', author: 'Author 1', isbn: 'ISBN001', price: 10.99 },
      { name: 'Book 2', author: 'Author 2', isbn: 'ISBN002', price: 12.99 },
      { name: 'Book 3', author: 'Author 3', isbn: 'ISBN003', price: 9.99 },
      // Add more books as needed
    ];
  }
}

CSS
/* CSS Styles for Library Management Page */
.library-container {
  max-width: 800px;
  margin: 0 auto;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

thead th {
  background-color: #f2f2f2;
  font-weight: bold;
  text-align: left;
  padding: 10px;
  border-bottom: 1px solid #ccc;
}

tbody td {
  padding: 10px;
  border-bottom: 1px solid #ccc;
}

tr:hover {
  background-color: #f2f2f2;
}

books.ts

// Book Interface or Class (representing book data)
export interface Book {
  name: string;
  author: string;
  isbn: string;
  price: number;
}


